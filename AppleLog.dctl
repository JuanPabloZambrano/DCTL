#line 2
/*Reversed calculated apple log transfer function, this is only valid for positive values, I haven't 
calculated the curve for negative values
*/
DEFINE_UI_PARAMS(Direction, Direction, DCTLUI_COMBO_BOX, 0, {Log2Lin, Lin2Log}, {Log2Lin, Lin2Log})



__DEVICE__ float log2lin(float in) {
    
    float R0 = -0.05641088f;
    float Rt =  0.01f;
    float c =  47.28711236f;
    float beta = 0.00964052f;
    float gamma = 0.08550479f;
    float delta = 0.69336945f;
    float Pt = c*(Rt-R0)*(Rt-R0);

    float out = in>=Pt?_powf(2,(in-delta)/gamma)-beta:in<0?R0:_sqrtf(in/c)+R0;
    
    return out;
}
__DEVICE__ float lin2log(float in) {
    
    float R0 = -0.05641088f;
    float Rt =  0.01f;
    float c =  47.28711236f;
    float beta = 0.00964052f;
    float gamma = 0.08550479f;
    float delta = 0.69336945f;

    float out = in>=Rt?gamma*_log2f(in+beta)+delta:in<R0?0:c*(in-R0)*(in-R0);
    
    return out;
}


__DEVICE__ float3 transform(int p_Width, int p_Height, int p_X, int p_Y, float p_R, float p_G, float p_B)
{


    float3 rgb = {p_R, p_G, p_B};

switch (Direction) {
        case Log2Lin:
           
            rgb.x = log2lin(rgb.x);
            rgb.y = log2lin(rgb.y);
            rgb.z = log2lin(rgb.z);

            break;
        
        case Lin2Log:
            rgb.x = lin2log(rgb.x);
            rgb.y = lin2log(rgb.y);
            rgb.z = lin2log(rgb.z);
            
            break;

    }

    return rgb;

}

